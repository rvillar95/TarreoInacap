function(a){function b(a, b){a.closest(".rut-container").append(b)}a.fn.rut = function(c){var d = a.extend({error_html:'<span class="rut-error">Rut incorrecto</span>', formatear:!0, on:"blur", required:!0, placeholder:!0, fn_error:function(a){b(a, d.error_html)}, fn_validado:function(a){}}, c); return this.each(function(){var b = a(this); b.wrap('<div class="rut-container"></div>'), b.attr("pattern", "[0-9]{1,2}.[0-9]{3}.[0-9]{3}-[0-9Kk]{1}").attr("maxlength", 12), d.required && b.attr("required", "required"), d.placeholder && b.attr("placeholder", "12.345.678-5"), d.formatear && b.on("blur", function(){b.val(a.rut.formatear(b.val()))}), b.on(d.on, function(){a(".rut-error").remove(), a.rut.validar(b.val()) && "" != a.trim(b.val())?d.fn_validado():d.fn_error(b)})})}}(jQuery), jQuery.rut = {validar:function(a){if (!/[0-9]{1,2}.[0-9]{3}.[0-9]{3}-[0-9Kk]{1}/.test(a))return!1; var b = a.split("-"), c = b[1], a = b[0].split(".").join(""); return"K" == c && (c = "k"), $.rut.dv(a) == c}, dv:function(a){for (var b = 0, c = 1; a; a = Math.floor(a / 10))c = (c + a % 10 * (9 - b++ % 6)) % 11; return c?c - 1:"k"}, formatear:function(a){for (var b = this.quitar_formato(a), a = b.substring(0, b.length - 1), c = ""; a.length > 3; )c = "." + a.substr(a.length - 3) + c, a = a.substring(0, a.length - 3); return"" == $.trim(a)?"":a + c + "-" + b.charAt(b.length - 1)}, quitar_formato:function(a){return a = a.split("-").join("").split(".").join("")}};







/* LISTAS DUALES :: BEGIN */

function esNumeroMaxLength(evt, input, maximo) {
	var charCode = getCharCode(evt);
    if (!esNumero(evt)){
       return false;
    }else if (charCode == 0){
    	return true;
    }else if (document.getElementById(input).value.length >= maximo){
        return false;
    }

    return true;
}

function compareOptionValues(a, b) {
	var sA = parseInt(a.value, 36);
	var sB = parseInt(b.value, 36);
	return sA - sB;
}

function compareOptionText(a, b) {
	var sA = parseInt(a.text, 36);
	var sB = parseInt(b.text, 36);
	return sA - sB;
}

function moveDualList(srcList, destList, moveAll, srcHiddenList, destHiddenList) {
	if ((srcList.selectedIndex == -1) && (moveAll == false)) {
		return	;
	}
	newDestList = new Array(destList.options.length);
	var len = 0;
	for (len = 0; len < destList.options.length; len++) {
		if (destList.options[len] != null) {
			newDestList[len] = new Option(destList.options[len].text,
					destList.options[len].value,
					destList.options[len].defaultSelected,
					destList.options[len].selected);
		}
	}
	for ( var i = 0; i < srcList.options.length; i++) {
		if (srcList.options[i] != null
				&& (srcList.options[i].selected == true || moveAll)) {
			newDestList[len] = new Option(srcList.options[i].text,
					srcList.options[i].value,
					srcList.options[i].defaultSelected,
					srcList.options[i].selected);
			len++;
		}
	}
	newDestList.sort(compareOptionValues); // BY VALUES
	for ( var j = 0; j < newDestList.length; j++) {
		if (newDestList[j] != null) {
			destList.options[j] = newDestList[j];
		}
	}
	for ( var i = srcList.options.length - 1; i >= 0; i--) {
		if (srcList.options[i] != null
				&& (srcList.options[i].selected == true || moveAll)) {
			srcList.options[i] = null;
			//srcList.remove(i);
		}
	}
	ordenarSelect(destList);
	setearCamposOcultos(srcHiddenList,srcList.options.length);
	setearCamposOcultos(destHiddenList,destList.options.length);
}

function ordenarSelect(elSelect) {
	items=elSelect.options;
	opciones=new Array();
	for(var a=0;a<items.length;a++)
    //relleno y ordeno
    	opciones[a]=new Array( items[a].text, items[a].value);
    opciones.sort();    // ordeno
    for(var a=0;a<items.length;a++) { //sobreescribo
        items[a].text=opciones[a][0];
        items[a].value=opciones[a][1];
   	}
}

function setearCamposOcultos(nombreDelCampo, valor){
	nombreDelCampo.value=valor;
}

/* LISTAS DUALES :: END */

/* VALIDACIONES :: BEGIN */

function isNumberKeyOrCharKey(evt) {
 return (isNumberKey(evt) || esLetra(evt));
}

function esAlfanumerico(evt) {
	return (isNumberKey(evt) || esLetra(evt));
}

/* acepta n�meros, letras y guiones */
function esNumeroIdentificacion(evt) {
 return (isNumberKey(evt) || esLetra(evt) || isDash(evt));
}

/* n�meros y punto decimal */
function esImporte(evt) {
 return (isNumberKey(evt) || isDecimalPoint(evt));
}

function isNumberKey(evt) {
	var charCode = getCharCode(evt);
	if (charCode > 31 && (charCode < 48 || charCode > 57)){
		return false;
	}
	return true;
}

function getCharCode(evt){
	if(window.event) { // Internet Explorer
	  return evt.keyCode;
	}
	else { // navegadores DOM
	  return evt.charCode;
	}
}

function isDash(evt){
	var charCode = getCharCode(evt);
	if (charCode != 45){
		return false;
	}
	return true;
}

function isDecimalPoint(evt){
	var charCode = getCharCode(evt);
	//if (charCode != 46){
	//Usamos coma como separador decimal
	  if (charCode != 44){
	  return false;
	}
	return true;
}

function isNumberKeyOrDash(evt) {
	return isNumberKey(evt) || isDash(evt);
}


function esNumeroTel(evt) {
	/*var charCode = getCharCode(evt);
    if (charCode > 31 && (charCode < 48 || charCode > 57) || charCode != 45 )
       return false;

    return true;*/

	return isNumberKeyOrDash(evt);
}

function esLetra(evt) {
    var charCode = getCharCode(evt);
    if (charCode > 32 && ((charCode < 65 || charCode > 90 ) && (charCode < 97 || charCode > 122 ))  && charCode != 225 && charCode != 233 && charCode != 237 &&
            charCode != 243 && charCode != 250 && charCode != 209 && charCode != 241)
   return false;

return true;
}

function esLetraSinEnieTildes(evt) {
	
	var charCode = getCharCode(evt);
	if (charCode > 32 && ((charCode < 65 || charCode > 90 ) && (charCode < 97 || charCode > 122 ))  
			||charCode == 209 || charCode == 241)
		return false;
	
	if (tieneTilde(evt))
		return false;
		

	return true;
}

function tieneTilde(evt) {
	
	var charCode = getCharCode(evt);
	if (charCode == 225 || charCode == 233 
			|| charCode == 237 || charCode == 243 || charCode == 250
			|| charCode == 193 || charCode == 205 
			|| charCode == 201 || charCode == 211 || charCode == 218)
		return true;

	return false;
}

/**/
function esNumero(evt) {
	var charCode = getCharCode(evt);
    if (charCode > 31 && (charCode < 48 || charCode > 57))
       return false;

    return true;
}

/* VALIDACIONES :: END */

function isIE(){
	if (navigator.appName.indexOf("Microsoft") != -1) {
		return true;
	}
	else {
		return false;
	}
}

function useLoadingMessage(message) {
	var loadingMessage;
	if (message) loadingMessage = message;
	else loadingMessage = "Cargando";

	dwr.engine.setPreHook(function() {
		showLoadingMessage(message);
	});
	dwr.engine.setPostHook(function() {
		hideLoadingMessage(message);
	});
}

function showLoadingMessage(message) {
	try{
		$j.blockUI({ message:  $j('#modalProcesando') });
	} catch(e) {
	 //no hacer nada
	}
}

function hideLoadingMessage(message) {

	try{
		$j.unblockUI();
	} catch(e) {
	 //no hacer nada
	}
}


//-------------------------------------------------------------//
//Funcion para submitear con enter en IE6 y Spring por bug del IE
/*function enterKey(e)
{
     var key;

     if(isIE()){
          key = window.event.keyCode;     //IE
     }
     else{
          key = e.which;     //firefox
     }
     if(key == 13){
    	 document.forms(0).submit();
    	 return true;
     }
     return false;
}*/

//-------------------------------------------------------------//
//Funcion que obtiene la tecla presionada Crossbrowser
function getKey(e){
	if(isIE()){
		key = window.event.keyCode;     //IE
	}
	else{
		key = e.which;     //firefox
	}
	return key;
}

//------------------------------------------------------------//
//Submitea con la tecla enter
//idBoton es el Id del submit que clickeara por defecto
function enterKey(event, idBoton) {
	key = getKey(event);
	if (key == 13){
		document.getElementById(idBoton).click();
		return false;
	}
}

//------------------------------------------------------------//
//----Funciones de bloqueo de UI (mensaje de "cargando")------//

//-------inicializacion de estilos----------//
$j.blockUI.defaults.css.border = 'none';
$j.blockUI.defaults.css.left = '0%';
$j.blockUI.defaults.css.top = '5%';

//$.blockUI.defaults.css.position = 'absolute';

function bloquearUIClick(param1){
	$j(param1).click(function() {
		$j.blockUI({ message:  $j('#modalProcesando') });
		$j(document).ready(function() {
			$j.unblockUI;
	    });
	})
}

function bloquearUIClickOpenSeleccionPerfil(param1,direccion){
	$j(param1).click(function() {
		$j.blockUI({ message:  $j('#modalProcesando') });

		$j.ajax({
			type: "GET",
			url: direccion,
			success: function(data){

				$j('#modalPopup').html(data);
			},
			complete: function(x,y) {
			 $j.unblockUI;
             $j.blockUI({ message:  $j('#modalPopup'), centerY:true, centerX:true, css:{left:'50%',top:'50%'}});
        	}
		});
	})
}


function desbloquearUIclick(param1)	{

	$j(param1).click(function() {
		$j.unblockUI();
		$j('#modalPopup').hide();
	});
}

function bloquearUISubmit(param2){
	$j(param2).submit(function() {
		$j.blockUI({ message:  $j('#modalProcesando') });
		$j(document).ready(function() {
			$j.unblockUI;
	    });
	})
}

function popUp(URL) {
	window.open(URL);
}

function capLock(e){
	
	 kc=e.keyCode?e.keyCode:e.which;	 	 
	 sk=e.shiftKey?e.shiftKey:((kc==16)?true:false);
	 
	 if(event.shiftKey==1)
		 sk=false; // si se tiene la tecla shift presionada junto a cualquier caracter.
	 
	 if(((kc>=65&&kc<=90)&&!sk)||((kc>=97&&kc<=122)&&sk) || (kc==209))//209=�
	 	return false;
	 else 
		 return true;
}

/* es rut */
function esRUT(evt) {
 return (isNumberKey(evt) || isCharRut(evt));
}

function isCharRut(evt){
	var charCode = getCharCode(evt);
	  if (charCode != 107 && charCode != 75){
	  return false;
	}
	return true;
}

//Retorna true si el parametro permita la edicion de un texbox con contenido numerico. Esta funcion es soportado para eventos onkeydown
function isNumericEditable(evt) {

    var keyCode = evt.keyCode;

    //48 && 57 entre 0 y 9
    //8 backspace
    //37 arrow left
    //39 arrow right
    //46 delete
    if((keyCode > 47 && keyCode < 58) || keyCode==8 || keyCode==37 || keyCode==39 || keyCode==46) {

            return true;

    }

    return false;

}

//Retorna true si el parametro de entrada es numerico. Esta funcion es soportado para eventos onkeydown
function isNumeric(evt) {

    var keyCode = evt.keyCode;

    //47 && 50 entre 0 y 9
    if(keyCode > 47 && keyCode < 58) {

            return true;

    }

    return false;

}


function validaEmail(evt){
	tecla=(document.all) ? evt.keyCode : evt.which;
	if (validatecla (tecla,"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_abcdefghijklmnopqrstuvwxyz@") == false){
		return false;
	}
	return true;
}

function validatecla (strtecla,strtextopermitido){
	var swok=0;
	if ((strtecla == 13) || (strtecla == 8) || (strtecla == 0)){
		return (true);
	}
	
	for (var j=0 ; j < strtextopermitido.length; j++ ){
		charc = strtextopermitido.charCodeAt(j);
		if (charc==1121)  
			charc=209;
		if ( strtecla == charc ){            
			swok++;
			break;
		}
	}
	
	if(strtecla>128)
		return false;

	if (swok == 0 )
		return (false);
	return (true);
}

function getClipboardDataData(event) {
	
	if (window.clipboardData && window.clipboardData.getData) { // IE
		var pastedText = window.clipboardData.getData('Text');
	} else if (event.clipboardData && event.clipboardData.getData) {
		var pastedText = event.clipboardData.getData('text/plain');
	}
	
	return pastedText;
	
}

function isNumberPaste(event) {
	
	var isNumber = true;
	
	var pastedText = getClipboardDataData(event);
	  
	var charArray = pastedText.split("");
	
	for(i=0; i<charArray.length;i++) {
		var isNaNValue = isNaN(charArray[i]);
		if(isNaNValue) {
			isNumber = false;
			break;
		};
	}
	
	return isNumber;

}

function isLetterPaste(event) {
	
	var isLetter = true;
	
	var pastedText = getClipboardDataData(event);
	  
	var charArray = pastedText.split("");
	
	for(i=0; i<charArray.length;i++) {
		var isNaNValue = isNaN(charArray[i]);
		if(!isNaNValue) {
			isLetter = false;
			break;
		};
	}
	
	return isLetter;

}

function esNumeroOrCopyOrPasteKeyPress(evt) {
	var charCode = getCharCode(evt);
	
// 	copy = 99
// 	paste = 118
	if(charCode==99 || charCode==118) return true;
	
    if (charCode > 31 && (charCode < 48 || charCode > 57))
       return false;

    return true;
}

function isRutPaste(evt) {
	
	var isRutKey = true;
	
	var pastedText = getClipboardDataData(evt);
	  
	var charArray = pastedText.split("");
	
	for(i=0; i<charArray.length; i++) {
		var isNaNValue = isNaN(charArray[i]);
		if(isNaNValue && i<charArray.length-1) {
			isRutKey = false;
			break;
		} else if(isNaNValue && charArray[i] != 'K' && charArray[i] != 'k') {
			isRutKey = false;
			break;				
		}
	}
	
	return isRutKey;
	
}


function esCharacterRut(evt){
	try{
		return (isCharRut(evt) || isNumberKey(evt));
	}catch(e){
		return false;
	}
}

var showMore = false;

//Controla logica Ver Mas
function showHideElementsById(showMoreId, showMinusId, elementsId) {

	//Flag que permite identificar cuando esta habilitada la vista ver mas
	if (!showMore) {
		showMore = true;
	} else if (showMore) {
		showMore = false;
	}

	//Agregamos todos los id que deseamos mostrar/ocultar
	var hideElements = elementsId.split(',');

	var i = 0;
	for (i = 0; i < hideElements.length; i++) {

		var element = $('#' + hideElements[i])

		if (!showMore) {
			$(element).hide();
			$('#' + showMoreId).show();
			$('#' + showMinusId).hide();
		} else {
			$(element).show();
			$('#' + showMinusId).show();
			$('#' + showMoreId).hide();
		}

	}

}

/*
	Las funciones del LOGIN se separan del 'global.js' ya que este ultimo
	contiene funciones que denotan las reglas del negocio.
 */
function verificarCamposVaciosLogin() {
	var formLogin = document.getElementById("login");	
	formLogin.j_username.value = formLogin.j_username.value.toUpperCase();
	var usuario = formLogin.j_username.value;
	while (usuario.indexOf(".") != -1) {
		usuario = usuario.replace(".", "");
	}
	usuario = usuario.replace("-", "");
	/*document.getElementById("login").j_username.value=usuario;*/
	var clave = formLogin.j_password.value;
	var rut = usuario.substring(0, usuario.length - 1);
	var digitoVerificador = usuario.substring(usuario.length - 1, usuario.length);
	
	for (i = 0; i < rut.length; i++){
		if (!((rut.charAt(i) >= "0") && (rut.charAt(i) <= "9"))){
     		alert("El valor ingresado no corresponde a un RUT v\u00e1lido");
		//document.getElementById("msjAlerts").innerHTML="El valor ingresado no corresponde a un RUT v\u00e1lido";
		//mostrarPopUpAlerts();
    		return false;
     	 }     	  
  	} 	
	if(rut>50000000){
		alert("El valor ingresado no corresponde a un RUT v\u00e1lido");
		//document.getElementById("msjAlerts").innerHTML="El valor ingresado no corresponde a un RUT v\u00e1lido";
		//mostrarPopUpAlerts();
		return false;
	}	
	if (usuario == "" && clave == "") {
		alert("Debe ingresar un RUT y una Clave para poder ingresar");
		//document.getElementById("msjAlerts").innerHTML="Debe ingresar un RUT y una Clave para poder ingresar";
		//mostrarPopUpAlerts();
		return false;
	} else if (usuario == "") {
		alert("Ingrese RUT");
		//document.getElementById("msjAlerts").innerHTML="Ingrese RUT";
		//mostrarPopUpAlerts();
		return false;
	} else if (clave == "") {
		alert("Ingrese Clave");
		//document.getElementById("msjAlerts").innerHTML="Ingrese Clave";
		//mostrarPopUpAlerts();
		return false;
	} else if (digitoVerificador != calcularDigitoVerificadorRUT(rut)) {
		alert("Ingrese un RUT v\u00e1lido");
		//document.getElementById("msjAlerts").innerHTML="Ingrese un RUT v\u00e1lido";
		//mostrarPopUpAlerts();
		return false;
	} else {
		var errorDiv = document.getElementById("errorDiv");
		if (errorDiv) {
			errorDiv.style.display = "none";
		}
		$j.blockUI({
			message : $j("#modalProcesando")
		});
	}
}

function tecladoVirtual(input) {
	if (document.getElementById("tecladoVirtualCheck").checked) {
		changeDivTeclado(input, "tecladoVirtualCheck", -160, 110);
	} else {
		cerrarTeclado();
	}
}

function calcularDigitoVerificadorRUT(strRutSinDv) {
	var lengthRut = strRutSinDv.length;
	var lngSumaTotal = calculaSumaRut(strRutSinDv, lengthRut);
	/* var intRestoSumaTotal = 11 - (lngSumaTotal mod 11); */
	var intRestoSumaTotal = 11 - (lngSumaTotal % 11);
	var strDVCalculado;

	switch (intRestoSumaTotal) {
	case 10: {
		strDVCalculado = "K";
		break
	}
	case 11: {
		strDVCalculado = "0";
		break
	}
	default: {
		strDVCalculado = "" + intRestoSumaTotal;
		break
	}
	}
	return strDVCalculado;
}

function calculaSumaRut(strRut, lngRut) {
	var sumaRut;
	if (lngRut == 0) {
		sumaRut = 0;
	} else {
		var i = strRut.length - lngRut + 2;
		if (i >= 8) {
			i = i - 6;
		}
		var a = strRut.substr(lngRut - 1, 1);
		var lngSumParcial = a * i;
		sumaRut = lngSumParcial + calculaSumaRut(strRut, lngRut - 1);
	}
	return sumaRut;
}

function formatoRut() {
	var formLogin = document.getElementById("login");
	var sRut1 = formLogin.j_username.value.toUpperCase();
	sRut1=quitarEspacios(sRut1);
	// var sRut1 = rut.value;
	// contador de para saber cuando insertar el . o la -
	var nPos = 0;

	// Guarda el rut invertido con los puntos y el gui�n agregado
	var sInvertido = "";

	// Guarda el resultado final del rut como debe ser
	var sRut = "";
	while (sRut1.indexOf(".") != -1) {
		sRut1 = sRut1.replace(".", "");
	}
	sRut1 = sRut1.replace("-", "");
	
	for ( var i = sRut1.length - 1; i >= 0; i--) {
		sInvertido += sRut1.charAt(i);
		if (i == sRut1.length - 1)
			sInvertido += "-";
		else if (nPos == 3) {
			sInvertido += ".";
			nPos = 0;
		}
		nPos++;
	}

	for ( var j = sInvertido.length - 1; j >= 0; j--) {
		if (sInvertido.charAt(sInvertido.length - 1) != ".")
			sRut += sInvertido.charAt(j);
		else if (j != sInvertido.length - 1)
			sRut += sInvertido.charAt(j);

	}
	// Pasamos al campo el valor formateado
	// rut.value = sRut.toUpperCase();
	document.getElementById("login").j_username.value = sRut.toUpperCase();

}

function quitarEspacios(rut) {
	var i=0;
	while (rut.length>i){
		if((rut.substring(i, i+1)==" ")||(rut.codePointAt(i)==173)){
			rut = rut.substring(0, i) + rut.substring(i+1, rut.length);
		}else{
			i=i+1;
		}
	}
	return rut;
}


if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it�s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}

function rut(value){
	var sRut1 = value;
	while (sRut1.indexOf(".") != -1) {
		sRut1 = sRut1.replace(".", "");
	}
	sRut1 = sRut1.replace("-", "");
	if(sRut1.length>9){
		jQuery('#username').replaceSelection("", true);
	}else{
		var str=value.substring(value.length-1, value.length);	
		if(str!="0" && str!="1" &&  str!="2" && str!="3" && str!="4" && str!="5" &&
				str!="6" && str!="7" && str!="8" && str!="9" && str!="K" && str!="k"){
			jQuery('#username').replaceSelection("", true);
		}
	}
	
}

function esRutLogin(evt){
	var charCode = getCharCode(evt);	
	if(charCode==0 || largo(evt)){
		return esRUT(evt);
	}
	return false;
}

function largo(evt){
	var formLogin = document.getElementById("login");
	var sRut1 = formLogin.j_username.value.toUpperCase();
	while (sRut1.indexOf(".") != -1) {
		sRut1 = sRut1.replace(".", "");
	}
	sRut1 = sRut1.replace("-", "");
	if(sRut1.length<9){
		return true;	
	}
	return false;	
}
